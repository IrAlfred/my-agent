#!/usr/bin/env bun

// Simple workflow example: Generate commit message + Save detailed review
import { generateCommitMessageTool } from "./commitMessage";
import { writeMarkdownTool } from "./writeMarkdown";
import { getFileChangesInDirectoryTool } from "./tools";

async function runCodeReviewWorkflow() {
  try {
    console.log("🚀 Starting code review workflow...");
    
    // Step 1: Get code changes
    console.log("📁 Analyzing code changes...");
    // Note: In actual AI agent context, this would be called by the AI
    // Here we're simulating the workflow
    
    // Step 2: Generate commit message (display only)
    console.log("🤖 Commit message will be generated by AI...");
    
    // Step 3: Generate and save comprehensive review
    console.log("📝 Code review will be written to review.md...");
    
    // Example of what the AI agent would do:
    const exampleReview = `# Code Review Report
Generated on: ${new Date().toISOString()}

## Summary
Enhanced the code review agent with commit message generation and markdown file writing capabilities.

## Files Changed
- \`commitMessage.ts\` - New tool for AI-powered commit message generation
- \`writeMarkdown.ts\` - New tool for writing reviews to markdown files
- \`index.ts\` - Updated to include new tools in the agent
- \`prompts.ts\` - Enhanced system prompt with new capabilities
- \`test-script.ts\` - Test script for demonstrating functionality

## Code Quality Analysis
✅ **Good Practices:**
- Proper TypeScript typing with Zod schemas
- Error handling with fallback mechanisms
- Modular tool architecture
- Clear separation of concerns

## Suggestions
1. Consider adding configuration for different AI models
2. Add validation for markdown content before writing
3. Include file size limits for large diffs
4. Add logging for debugging purposes

## Security Considerations
- File paths should be validated to prevent directory traversal
- AI-generated content should be sanitized before writing to files

## Performance Impact
- Minimal impact as tools are called on-demand
- Consider caching for large repositories
`;

    // Simulate saving the review
    await Bun.write("/home/alfred/alx/my-agent/example-review.md", exampleReview);
    console.log("✅ Example review saved to: example-review.md");
    
    console.log(`
📋 Workflow Summary:
1. ✅ Code changes analyzed
2. ✅ Commit message generated (displayed in console)
3. ✅ Detailed review saved to markdown file

🎯 The key difference:
- Commit messages: Generated for display/reference
- Code reviews: Saved to markdown files for documentation
`);
    
  } catch (error) {
    console.error("❌ Error in workflow:", error);
  }
}

runCodeReviewWorkflow();
